// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package openai

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/pikachu0310/hackathon-23winter/internal/repository/api/openai/openai_api"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAssistants request
	ListAssistants(ctx context.Context, params *openai_api.ListAssistantsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAssistantWithBody request with any body
	CreateAssistantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAssistant(ctx context.Context, body openai_api.CreateAssistantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAssistant request
	DeleteAssistant(ctx context.Context, assistantId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssistant request
	GetAssistant(ctx context.Context, assistantId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyAssistantWithBody request with any body
	ModifyAssistantWithBody(ctx context.Context, assistantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyAssistant(ctx context.Context, assistantId string, body openai_api.ModifyAssistantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAssistantFiles request
	ListAssistantFiles(ctx context.Context, assistantId string, params *openai_api.ListAssistantFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAssistantFileWithBody request with any body
	CreateAssistantFileWithBody(ctx context.Context, assistantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAssistantFile(ctx context.Context, assistantId string, body openai_api.CreateAssistantFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAssistantFile request
	DeleteAssistantFile(ctx context.Context, assistantId string, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssistantFile request
	GetAssistantFile(ctx context.Context, assistantId string, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSpeechWithBody request with any body
	CreateSpeechWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSpeech(ctx context.Context, body openai_api.CreateSpeechJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTranscriptionWithBody request with any body
	CreateTranscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTranslationWithBody request with any body
	CreateTranslationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateChatCompletionWithBody request with any body
	CreateChatCompletionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateChatCompletion(ctx context.Context, body openai_api.CreateChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCompletionWithBody request with any body
	CreateCompletionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCompletion(ctx context.Context, body openai_api.CreateCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEditWithBody request with any body
	CreateEditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEdit(ctx context.Context, body openai_api.CreateEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEmbeddingWithBody request with any body
	CreateEmbeddingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEmbedding(ctx context.Context, body openai_api.CreateEmbeddingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFiles request
	ListFiles(ctx context.Context, params *openai_api.ListFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFileWithBody request with any body
	CreateFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFile request
	DeleteFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveFile request
	RetrieveFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadFile request
	DownloadFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFineTunes request
	ListFineTunes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFineTuneWithBody request with any body
	CreateFineTuneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFineTune(ctx context.Context, body openai_api.CreateFineTuneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveFineTune request
	RetrieveFineTune(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelFineTune request
	CancelFineTune(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFineTuneEvents request
	ListFineTuneEvents(ctx context.Context, fineTuneId string, params *openai_api.ListFineTuneEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPaginatedFineTuningJobs request
	ListPaginatedFineTuningJobs(ctx context.Context, params *openai_api.ListPaginatedFineTuningJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFineTuningJobWithBody request with any body
	CreateFineTuningJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFineTuningJob(ctx context.Context, body openai_api.CreateFineTuningJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveFineTuningJob request
	RetrieveFineTuningJob(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelFineTuningJob request
	CancelFineTuningJob(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFineTuningEvents request
	ListFineTuningEvents(ctx context.Context, fineTuningJobId string, params *openai_api.ListFineTuningEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateImageEditWithBody request with any body
	CreateImageEditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateImageWithBody request with any body
	CreateImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateImage(ctx context.Context, body openai_api.CreateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateImageVariationWithBody request with any body
	CreateImageVariationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModels request
	ListModels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModel request
	DeleteModel(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveModel request
	RetrieveModel(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateModerationWithBody request with any body
	CreateModerationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateModeration(ctx context.Context, body openai_api.CreateModerationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateThreadWithBody request with any body
	CreateThreadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateThread(ctx context.Context, body openai_api.CreateThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateThreadAndRunWithBody request with any body
	CreateThreadAndRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateThreadAndRun(ctx context.Context, body openai_api.CreateThreadAndRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteThread request
	DeleteThread(ctx context.Context, threadId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetThread request
	GetThread(ctx context.Context, threadId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyThreadWithBody request with any body
	ModifyThreadWithBody(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyThread(ctx context.Context, threadId string, body openai_api.ModifyThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMessages request
	ListMessages(ctx context.Context, threadId string, params *openai_api.ListMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMessageWithBody request with any body
	CreateMessageWithBody(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMessage(ctx context.Context, threadId string, body openai_api.CreateMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessage request
	GetMessage(ctx context.Context, threadId string, messageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyMessageWithBody request with any body
	ModifyMessageWithBody(ctx context.Context, threadId string, messageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyMessage(ctx context.Context, threadId string, messageId string, body openai_api.ModifyMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMessageFiles request
	ListMessageFiles(ctx context.Context, threadId string, messageId string, params *openai_api.ListMessageFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageFile request
	GetMessageFile(ctx context.Context, threadId string, messageId string, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRuns request
	ListRuns(ctx context.Context, threadId string, params *openai_api.ListRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRunWithBody request with any body
	CreateRunWithBody(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRun(ctx context.Context, threadId string, body openai_api.CreateRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRun request
	GetRun(ctx context.Context, threadId string, runId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyRunWithBody request with any body
	ModifyRunWithBody(ctx context.Context, threadId string, runId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyRun(ctx context.Context, threadId string, runId string, body openai_api.ModifyRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelRun request
	CancelRun(ctx context.Context, threadId string, runId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRunSteps request
	ListRunSteps(ctx context.Context, threadId string, runId string, params *openai_api.ListRunStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRunStep request
	GetRunStep(ctx context.Context, threadId string, runId string, stepId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitToolOuputsToRunWithBody request with any body
	SubmitToolOuputsToRunWithBody(ctx context.Context, threadId string, runId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitToolOuputsToRun(ctx context.Context, threadId string, runId string, body openai_api.SubmitToolOuputsToRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAssistants(ctx context.Context, params *openai_api.ListAssistantsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAssistantsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssistantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssistantRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssistant(ctx context.Context, body openai_api.CreateAssistantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssistantRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAssistant(ctx context.Context, assistantId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAssistantRequest(c.Server, assistantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssistant(ctx context.Context, assistantId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssistantRequest(c.Server, assistantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyAssistantWithBody(ctx context.Context, assistantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyAssistantRequestWithBody(c.Server, assistantId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyAssistant(ctx context.Context, assistantId string, body openai_api.ModifyAssistantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyAssistantRequest(c.Server, assistantId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAssistantFiles(ctx context.Context, assistantId string, params *openai_api.ListAssistantFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAssistantFilesRequest(c.Server, assistantId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssistantFileWithBody(ctx context.Context, assistantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssistantFileRequestWithBody(c.Server, assistantId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssistantFile(ctx context.Context, assistantId string, body openai_api.CreateAssistantFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssistantFileRequest(c.Server, assistantId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAssistantFile(ctx context.Context, assistantId string, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAssistantFileRequest(c.Server, assistantId, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssistantFile(ctx context.Context, assistantId string, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssistantFileRequest(c.Server, assistantId, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpeechWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpeechRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpeech(ctx context.Context, body openai_api.CreateSpeechJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpeechRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTranscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTranscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTranslationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTranslationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChatCompletionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChatCompletionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChatCompletion(ctx context.Context, body openai_api.CreateChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChatCompletionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCompletionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCompletionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCompletion(ctx context.Context, body openai_api.CreateCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCompletionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEditRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEdit(ctx context.Context, body openai_api.CreateEditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEditRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEmbeddingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEmbeddingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEmbedding(ctx context.Context, body openai_api.CreateEmbeddingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEmbeddingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFiles(ctx context.Context, params *openai_api.ListFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFileRequest(c.Server, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveFileRequest(c.Server, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadFile(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadFileRequest(c.Server, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFineTunes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFineTunesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFineTuneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFineTuneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFineTune(ctx context.Context, body openai_api.CreateFineTuneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFineTuneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveFineTune(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveFineTuneRequest(c.Server, fineTuneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelFineTune(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelFineTuneRequest(c.Server, fineTuneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFineTuneEvents(ctx context.Context, fineTuneId string, params *openai_api.ListFineTuneEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFineTuneEventsRequest(c.Server, fineTuneId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPaginatedFineTuningJobs(ctx context.Context, params *openai_api.ListPaginatedFineTuningJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPaginatedFineTuningJobsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFineTuningJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFineTuningJobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFineTuningJob(ctx context.Context, body openai_api.CreateFineTuningJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFineTuningJobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveFineTuningJob(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveFineTuningJobRequest(c.Server, fineTuningJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelFineTuningJob(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelFineTuningJobRequest(c.Server, fineTuningJobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFineTuningEvents(ctx context.Context, fineTuningJobId string, params *openai_api.ListFineTuningEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFineTuningEventsRequest(c.Server, fineTuningJobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImageEditWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImageEditRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImage(ctx context.Context, body openai_api.CreateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImageVariationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImageVariationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModel(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModelRequest(c.Server, model)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveModel(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveModelRequest(c.Server, model)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModerationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModerationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModeration(ctx context.Context, body openai_api.CreateModerationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModerationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThreadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThread(ctx context.Context, body openai_api.CreateThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThreadAndRunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreadAndRunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThreadAndRun(ctx context.Context, body openai_api.CreateThreadAndRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThreadAndRunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteThread(ctx context.Context, threadId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteThreadRequest(c.Server, threadId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetThread(ctx context.Context, threadId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetThreadRequest(c.Server, threadId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyThreadWithBody(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyThreadRequestWithBody(c.Server, threadId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyThread(ctx context.Context, threadId string, body openai_api.ModifyThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyThreadRequest(c.Server, threadId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMessages(ctx context.Context, threadId string, params *openai_api.ListMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMessagesRequest(c.Server, threadId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessageWithBody(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageRequestWithBody(c.Server, threadId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessage(ctx context.Context, threadId string, body openai_api.CreateMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageRequest(c.Server, threadId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessage(ctx context.Context, threadId string, messageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageRequest(c.Server, threadId, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyMessageWithBody(ctx context.Context, threadId string, messageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyMessageRequestWithBody(c.Server, threadId, messageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyMessage(ctx context.Context, threadId string, messageId string, body openai_api.ModifyMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyMessageRequest(c.Server, threadId, messageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMessageFiles(ctx context.Context, threadId string, messageId string, params *openai_api.ListMessageFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMessageFilesRequest(c.Server, threadId, messageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageFile(ctx context.Context, threadId string, messageId string, fileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageFileRequest(c.Server, threadId, messageId, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRuns(ctx context.Context, threadId string, params *openai_api.ListRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRunsRequest(c.Server, threadId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRunWithBody(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunRequestWithBody(c.Server, threadId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRun(ctx context.Context, threadId string, body openai_api.CreateRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunRequest(c.Server, threadId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRun(ctx context.Context, threadId string, runId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunRequest(c.Server, threadId, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyRunWithBody(ctx context.Context, threadId string, runId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyRunRequestWithBody(c.Server, threadId, runId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyRun(ctx context.Context, threadId string, runId string, body openai_api.ModifyRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyRunRequest(c.Server, threadId, runId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelRun(ctx context.Context, threadId string, runId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelRunRequest(c.Server, threadId, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRunSteps(ctx context.Context, threadId string, runId string, params *openai_api.ListRunStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRunStepsRequest(c.Server, threadId, runId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRunStep(ctx context.Context, threadId string, runId string, stepId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunStepRequest(c.Server, threadId, runId, stepId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitToolOuputsToRunWithBody(ctx context.Context, threadId string, runId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitToolOuputsToRunRequestWithBody(c.Server, threadId, runId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitToolOuputsToRun(ctx context.Context, threadId string, runId string, body openai_api.SubmitToolOuputsToRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitToolOuputsToRunRequest(c.Server, threadId, runId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAssistantsRequest generates requests for ListAssistants
func NewListAssistantsRequest(server string, params *openai_api.ListAssistantsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assistants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAssistantRequest calls the generic CreateAssistant builder with application/json body
func NewCreateAssistantRequest(server string, body openai_api.CreateAssistantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAssistantRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAssistantRequestWithBody generates requests for CreateAssistant with any type of body
func NewCreateAssistantRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assistants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAssistantRequest generates requests for DeleteAssistant
func NewDeleteAssistantRequest(server string, assistantId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assistant_id", runtime.ParamLocationPath, assistantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assistants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssistantRequest generates requests for GetAssistant
func NewGetAssistantRequest(server string, assistantId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assistant_id", runtime.ParamLocationPath, assistantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assistants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyAssistantRequest calls the generic ModifyAssistant builder with application/json body
func NewModifyAssistantRequest(server string, assistantId string, body openai_api.ModifyAssistantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyAssistantRequestWithBody(server, assistantId, "application/json", bodyReader)
}

// NewModifyAssistantRequestWithBody generates requests for ModifyAssistant with any type of body
func NewModifyAssistantRequestWithBody(server string, assistantId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assistant_id", runtime.ParamLocationPath, assistantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assistants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAssistantFilesRequest generates requests for ListAssistantFiles
func NewListAssistantFilesRequest(server string, assistantId string, params *openai_api.ListAssistantFilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assistant_id", runtime.ParamLocationPath, assistantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assistants/%s/files", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAssistantFileRequest calls the generic CreateAssistantFile builder with application/json body
func NewCreateAssistantFileRequest(server string, assistantId string, body openai_api.CreateAssistantFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAssistantFileRequestWithBody(server, assistantId, "application/json", bodyReader)
}

// NewCreateAssistantFileRequestWithBody generates requests for CreateAssistantFile with any type of body
func NewCreateAssistantFileRequestWithBody(server string, assistantId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assistant_id", runtime.ParamLocationPath, assistantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assistants/%s/files", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAssistantFileRequest generates requests for DeleteAssistantFile
func NewDeleteAssistantFileRequest(server string, assistantId string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assistant_id", runtime.ParamLocationPath, assistantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assistants/%s/files/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssistantFileRequest generates requests for GetAssistantFile
func NewGetAssistantFileRequest(server string, assistantId string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assistant_id", runtime.ParamLocationPath, assistantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assistants/%s/files/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSpeechRequest calls the generic CreateSpeech builder with application/json body
func NewCreateSpeechRequest(server string, body openai_api.CreateSpeechJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSpeechRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSpeechRequestWithBody generates requests for CreateSpeech with any type of body
func NewCreateSpeechRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/speech")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTranscriptionRequestWithBody generates requests for CreateTranscription with any type of body
func NewCreateTranscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/transcriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTranslationRequestWithBody generates requests for CreateTranslation with any type of body
func NewCreateTranslationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/audio/translations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateChatCompletionRequest calls the generic CreateChatCompletion builder with application/json body
func NewCreateChatCompletionRequest(server string, body openai_api.CreateChatCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateChatCompletionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateChatCompletionRequestWithBody generates requests for CreateChatCompletion with any type of body
func NewCreateChatCompletionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat/completions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCompletionRequest calls the generic CreateCompletion builder with application/json body
func NewCreateCompletionRequest(server string, body openai_api.CreateCompletionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCompletionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCompletionRequestWithBody generates requests for CreateCompletion with any type of body
func NewCreateCompletionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/completions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateEditRequest calls the generic CreateEdit builder with application/json body
func NewCreateEditRequest(server string, body openai_api.CreateEditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEditRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEditRequestWithBody generates requests for CreateEdit with any type of body
func NewCreateEditRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/edits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateEmbeddingRequest calls the generic CreateEmbedding builder with application/json body
func NewCreateEmbeddingRequest(server string, body openai_api.CreateEmbeddingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEmbeddingRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEmbeddingRequestWithBody generates requests for CreateEmbedding with any type of body
func NewCreateEmbeddingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/embeddings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFilesRequest generates requests for ListFiles
func NewListFilesRequest(server string, params *openai_api.ListFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Purpose != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purpose", runtime.ParamLocationQuery, *params.Purpose); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFileRequestWithBody generates requests for CreateFile with any type of body
func NewCreateFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFileRequest generates requests for DeleteFile
func NewDeleteFileRequest(server string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveFileRequest generates requests for RetrieveFile
func NewRetrieveFileRequest(server string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadFileRequest generates requests for DownloadFile
func NewDownloadFileRequest(server string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files/%s/content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFineTunesRequest generates requests for ListFineTunes
func NewListFineTunesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine-tunes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFineTuneRequest calls the generic CreateFineTune builder with application/json body
func NewCreateFineTuneRequest(server string, body openai_api.CreateFineTuneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFineTuneRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFineTuneRequestWithBody generates requests for CreateFineTune with any type of body
func NewCreateFineTuneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine-tunes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveFineTuneRequest generates requests for RetrieveFineTune
func NewRetrieveFineTuneRequest(server string, fineTuneId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tune_id", runtime.ParamLocationPath, fineTuneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine-tunes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelFineTuneRequest generates requests for CancelFineTune
func NewCancelFineTuneRequest(server string, fineTuneId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tune_id", runtime.ParamLocationPath, fineTuneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine-tunes/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFineTuneEventsRequest generates requests for ListFineTuneEvents
func NewListFineTuneEventsRequest(server string, fineTuneId string, params *openai_api.ListFineTuneEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tune_id", runtime.ParamLocationPath, fineTuneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine-tunes/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Stream != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stream", runtime.ParamLocationQuery, *params.Stream); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPaginatedFineTuningJobsRequest generates requests for ListPaginatedFineTuningJobs
func NewListPaginatedFineTuningJobsRequest(server string, params *openai_api.ListPaginatedFineTuningJobsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine_tuning/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFineTuningJobRequest calls the generic CreateFineTuningJob builder with application/json body
func NewCreateFineTuningJobRequest(server string, body openai_api.CreateFineTuningJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFineTuningJobRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFineTuningJobRequestWithBody generates requests for CreateFineTuningJob with any type of body
func NewCreateFineTuningJobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine_tuning/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveFineTuningJobRequest generates requests for RetrieveFineTuningJob
func NewRetrieveFineTuningJobRequest(server string, fineTuningJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tuning_job_id", runtime.ParamLocationPath, fineTuningJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine_tuning/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelFineTuningJobRequest generates requests for CancelFineTuningJob
func NewCancelFineTuningJobRequest(server string, fineTuningJobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tuning_job_id", runtime.ParamLocationPath, fineTuningJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine_tuning/jobs/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListFineTuningEventsRequest generates requests for ListFineTuningEvents
func NewListFineTuningEventsRequest(server string, fineTuningJobId string, params *openai_api.ListFineTuningEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fine_tuning_job_id", runtime.ParamLocationPath, fineTuningJobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fine_tuning/jobs/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateImageEditRequestWithBody generates requests for CreateImageEdit with any type of body
func NewCreateImageEditRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/edits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateImageRequest calls the generic CreateImage builder with application/json body
func NewCreateImageRequest(server string, body openai_api.CreateImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateImageRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateImageRequestWithBody generates requests for CreateImage with any type of body
func NewCreateImageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/generations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateImageVariationRequestWithBody generates requests for CreateImageVariation with any type of body
func NewCreateImageVariationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/variations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListModelsRequest generates requests for ListModels
func NewListModelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteModelRequest generates requests for DeleteModel
func NewDeleteModelRequest(server string, model string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "model", runtime.ParamLocationPath, model)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveModelRequest generates requests for RetrieveModel
func NewRetrieveModelRequest(server string, model string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "model", runtime.ParamLocationPath, model)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/models/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateModerationRequest calls the generic CreateModeration builder with application/json body
func NewCreateModerationRequest(server string, body openai_api.CreateModerationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateModerationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateModerationRequestWithBody generates requests for CreateModeration with any type of body
func NewCreateModerationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/moderations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateThreadRequest calls the generic CreateThread builder with application/json body
func NewCreateThreadRequest(server string, body openai_api.CreateThreadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateThreadRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateThreadRequestWithBody generates requests for CreateThread with any type of body
func NewCreateThreadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateThreadAndRunRequest calls the generic CreateThreadAndRun builder with application/json body
func NewCreateThreadAndRunRequest(server string, body openai_api.CreateThreadAndRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateThreadAndRunRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateThreadAndRunRequestWithBody generates requests for CreateThreadAndRun with any type of body
func NewCreateThreadAndRunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/runs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteThreadRequest generates requests for DeleteThread
func NewDeleteThreadRequest(server string, threadId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetThreadRequest generates requests for GetThread
func NewGetThreadRequest(server string, threadId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyThreadRequest calls the generic ModifyThread builder with application/json body
func NewModifyThreadRequest(server string, threadId string, body openai_api.ModifyThreadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyThreadRequestWithBody(server, threadId, "application/json", bodyReader)
}

// NewModifyThreadRequestWithBody generates requests for ModifyThread with any type of body
func NewModifyThreadRequestWithBody(server string, threadId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMessagesRequest generates requests for ListMessages
func NewListMessagesRequest(server string, threadId string, params *openai_api.ListMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMessageRequest calls the generic CreateMessage builder with application/json body
func NewCreateMessageRequest(server string, threadId string, body openai_api.CreateMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMessageRequestWithBody(server, threadId, "application/json", bodyReader)
}

// NewCreateMessageRequestWithBody generates requests for CreateMessage with any type of body
func NewCreateMessageRequestWithBody(server string, threadId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMessageRequest generates requests for GetMessage
func NewGetMessageRequest(server string, threadId string, messageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "message_id", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/messages/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyMessageRequest calls the generic ModifyMessage builder with application/json body
func NewModifyMessageRequest(server string, threadId string, messageId string, body openai_api.ModifyMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyMessageRequestWithBody(server, threadId, messageId, "application/json", bodyReader)
}

// NewModifyMessageRequestWithBody generates requests for ModifyMessage with any type of body
func NewModifyMessageRequestWithBody(server string, threadId string, messageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "message_id", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/messages/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMessageFilesRequest generates requests for ListMessageFiles
func NewListMessageFilesRequest(server string, threadId string, messageId string, params *openai_api.ListMessageFilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "message_id", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/messages/%s/files", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessageFileRequest generates requests for GetMessageFile
func NewGetMessageFileRequest(server string, threadId string, messageId string, fileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "message_id", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/messages/%s/files/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRunsRequest generates requests for ListRuns
func NewListRunsRequest(server string, threadId string, params *openai_api.ListRunsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRunRequest calls the generic CreateRun builder with application/json body
func NewCreateRunRequest(server string, threadId string, body openai_api.CreateRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRunRequestWithBody(server, threadId, "application/json", bodyReader)
}

// NewCreateRunRequestWithBody generates requests for CreateRun with any type of body
func NewCreateRunRequestWithBody(server string, threadId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRunRequest generates requests for GetRun
func NewGetRunRequest(server string, threadId string, runId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/runs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyRunRequest calls the generic ModifyRun builder with application/json body
func NewModifyRunRequest(server string, threadId string, runId string, body openai_api.ModifyRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyRunRequestWithBody(server, threadId, runId, "application/json", bodyReader)
}

// NewModifyRunRequestWithBody generates requests for ModifyRun with any type of body
func NewModifyRunRequestWithBody(server string, threadId string, runId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/runs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelRunRequest generates requests for CancelRun
func NewCancelRunRequest(server string, threadId string, runId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/runs/%s/cancel", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRunStepsRequest generates requests for ListRunSteps
func NewListRunStepsRequest(server string, threadId string, runId string, params *openai_api.ListRunStepsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/runs/%s/steps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRunStepRequest generates requests for GetRunStep
func NewGetRunStepRequest(server string, threadId string, runId string, stepId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "step_id", runtime.ParamLocationPath, stepId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/runs/%s/steps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitToolOuputsToRunRequest calls the generic SubmitToolOuputsToRun builder with application/json body
func NewSubmitToolOuputsToRunRequest(server string, threadId string, runId string, body openai_api.SubmitToolOuputsToRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitToolOuputsToRunRequestWithBody(server, threadId, runId, "application/json", bodyReader)
}

// NewSubmitToolOuputsToRunRequestWithBody generates requests for SubmitToolOuputsToRun with any type of body
func NewSubmitToolOuputsToRunRequestWithBody(server string, threadId string, runId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "thread_id", runtime.ParamLocationPath, threadId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/threads/%s/runs/%s/submit_tool_outputs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAssistantsWithResponse request
	ListAssistantsWithResponse(ctx context.Context, params *openai_api.ListAssistantsParams, reqEditors ...RequestEditorFn) (*ListAssistantsResponse, error)

	// CreateAssistantWithBodyWithResponse request with any body
	CreateAssistantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssistantResponse, error)

	CreateAssistantWithResponse(ctx context.Context, body openai_api.CreateAssistantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssistantResponse, error)

	// DeleteAssistantWithResponse request
	DeleteAssistantWithResponse(ctx context.Context, assistantId string, reqEditors ...RequestEditorFn) (*DeleteAssistantResponse, error)

	// GetAssistantWithResponse request
	GetAssistantWithResponse(ctx context.Context, assistantId string, reqEditors ...RequestEditorFn) (*GetAssistantResponse, error)

	// ModifyAssistantWithBodyWithResponse request with any body
	ModifyAssistantWithBodyWithResponse(ctx context.Context, assistantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyAssistantResponse, error)

	ModifyAssistantWithResponse(ctx context.Context, assistantId string, body openai_api.ModifyAssistantJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyAssistantResponse, error)

	// ListAssistantFilesWithResponse request
	ListAssistantFilesWithResponse(ctx context.Context, assistantId string, params *openai_api.ListAssistantFilesParams, reqEditors ...RequestEditorFn) (*ListAssistantFilesResponse, error)

	// CreateAssistantFileWithBodyWithResponse request with any body
	CreateAssistantFileWithBodyWithResponse(ctx context.Context, assistantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssistantFileResponse, error)

	CreateAssistantFileWithResponse(ctx context.Context, assistantId string, body openai_api.CreateAssistantFileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssistantFileResponse, error)

	// DeleteAssistantFileWithResponse request
	DeleteAssistantFileWithResponse(ctx context.Context, assistantId string, fileId string, reqEditors ...RequestEditorFn) (*DeleteAssistantFileResponse, error)

	// GetAssistantFileWithResponse request
	GetAssistantFileWithResponse(ctx context.Context, assistantId string, fileId string, reqEditors ...RequestEditorFn) (*GetAssistantFileResponse, error)

	// CreateSpeechWithBodyWithResponse request with any body
	CreateSpeechWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpeechResponse, error)

	CreateSpeechWithResponse(ctx context.Context, body openai_api.CreateSpeechJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpeechResponse, error)

	// CreateTranscriptionWithBodyWithResponse request with any body
	CreateTranscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTranscriptionResponse, error)

	// CreateTranslationWithBodyWithResponse request with any body
	CreateTranslationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTranslationResponse, error)

	// CreateChatCompletionWithBodyWithResponse request with any body
	CreateChatCompletionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChatCompletionResponse, error)

	CreateChatCompletionWithResponse(ctx context.Context, body openai_api.CreateChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChatCompletionResponse, error)

	// CreateCompletionWithBodyWithResponse request with any body
	CreateCompletionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCompletionResponse, error)

	CreateCompletionWithResponse(ctx context.Context, body openai_api.CreateCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCompletionResponse, error)

	// CreateEditWithBodyWithResponse request with any body
	CreateEditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEditResponse, error)

	CreateEditWithResponse(ctx context.Context, body openai_api.CreateEditJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEditResponse, error)

	// CreateEmbeddingWithBodyWithResponse request with any body
	CreateEmbeddingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEmbeddingResponse, error)

	CreateEmbeddingWithResponse(ctx context.Context, body openai_api.CreateEmbeddingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEmbeddingResponse, error)

	// ListFilesWithResponse request
	ListFilesWithResponse(ctx context.Context, params *openai_api.ListFilesParams, reqEditors ...RequestEditorFn) (*ListFilesResponse, error)

	// CreateFileWithBodyWithResponse request with any body
	CreateFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFileResponse, error)

	// DeleteFileWithResponse request
	DeleteFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error)

	// RetrieveFileWithResponse request
	RetrieveFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*RetrieveFileResponse, error)

	// DownloadFileWithResponse request
	DownloadFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*DownloadFileResponse, error)

	// ListFineTunesWithResponse request
	ListFineTunesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListFineTunesResponse, error)

	// CreateFineTuneWithBodyWithResponse request with any body
	CreateFineTuneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFineTuneResponse, error)

	CreateFineTuneWithResponse(ctx context.Context, body openai_api.CreateFineTuneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFineTuneResponse, error)

	// RetrieveFineTuneWithResponse request
	RetrieveFineTuneWithResponse(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*RetrieveFineTuneResponse, error)

	// CancelFineTuneWithResponse request
	CancelFineTuneWithResponse(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*CancelFineTuneResponse, error)

	// ListFineTuneEventsWithResponse request
	ListFineTuneEventsWithResponse(ctx context.Context, fineTuneId string, params *openai_api.ListFineTuneEventsParams, reqEditors ...RequestEditorFn) (*ListFineTuneEventsResponse, error)

	// ListPaginatedFineTuningJobsWithResponse request
	ListPaginatedFineTuningJobsWithResponse(ctx context.Context, params *openai_api.ListPaginatedFineTuningJobsParams, reqEditors ...RequestEditorFn) (*ListPaginatedFineTuningJobsResponse, error)

	// CreateFineTuningJobWithBodyWithResponse request with any body
	CreateFineTuningJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFineTuningJobResponse, error)

	CreateFineTuningJobWithResponse(ctx context.Context, body openai_api.CreateFineTuningJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFineTuningJobResponse, error)

	// RetrieveFineTuningJobWithResponse request
	RetrieveFineTuningJobWithResponse(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*RetrieveFineTuningJobResponse, error)

	// CancelFineTuningJobWithResponse request
	CancelFineTuningJobWithResponse(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*CancelFineTuningJobResponse, error)

	// ListFineTuningEventsWithResponse request
	ListFineTuningEventsWithResponse(ctx context.Context, fineTuningJobId string, params *openai_api.ListFineTuningEventsParams, reqEditors ...RequestEditorFn) (*ListFineTuningEventsResponse, error)

	// CreateImageEditWithBodyWithResponse request with any body
	CreateImageEditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageEditResponse, error)

	// CreateImageWithBodyWithResponse request with any body
	CreateImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageResponse, error)

	CreateImageWithResponse(ctx context.Context, body openai_api.CreateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateImageResponse, error)

	// CreateImageVariationWithBodyWithResponse request with any body
	CreateImageVariationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageVariationResponse, error)

	// ListModelsWithResponse request
	ListModelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelsResponse, error)

	// DeleteModelWithResponse request
	DeleteModelWithResponse(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*DeleteModelResponse, error)

	// RetrieveModelWithResponse request
	RetrieveModelWithResponse(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*RetrieveModelResponse, error)

	// CreateModerationWithBodyWithResponse request with any body
	CreateModerationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModerationResponse, error)

	CreateModerationWithResponse(ctx context.Context, body openai_api.CreateModerationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModerationResponse, error)

	// CreateThreadWithBodyWithResponse request with any body
	CreateThreadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThreadResponse, error)

	CreateThreadWithResponse(ctx context.Context, body openai_api.CreateThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThreadResponse, error)

	// CreateThreadAndRunWithBodyWithResponse request with any body
	CreateThreadAndRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThreadAndRunResponse, error)

	CreateThreadAndRunWithResponse(ctx context.Context, body openai_api.CreateThreadAndRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThreadAndRunResponse, error)

	// DeleteThreadWithResponse request
	DeleteThreadWithResponse(ctx context.Context, threadId string, reqEditors ...RequestEditorFn) (*DeleteThreadResponse, error)

	// GetThreadWithResponse request
	GetThreadWithResponse(ctx context.Context, threadId string, reqEditors ...RequestEditorFn) (*GetThreadResponse, error)

	// ModifyThreadWithBodyWithResponse request with any body
	ModifyThreadWithBodyWithResponse(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyThreadResponse, error)

	ModifyThreadWithResponse(ctx context.Context, threadId string, body openai_api.ModifyThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyThreadResponse, error)

	// ListMessagesWithResponse request
	ListMessagesWithResponse(ctx context.Context, threadId string, params *openai_api.ListMessagesParams, reqEditors ...RequestEditorFn) (*ListMessagesResponse, error)

	// CreateMessageWithBodyWithResponse request with any body
	CreateMessageWithBodyWithResponse(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageResponse, error)

	CreateMessageWithResponse(ctx context.Context, threadId string, body openai_api.CreateMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessageResponse, error)

	// GetMessageWithResponse request
	GetMessageWithResponse(ctx context.Context, threadId string, messageId string, reqEditors ...RequestEditorFn) (*GetMessageResponse, error)

	// ModifyMessageWithBodyWithResponse request with any body
	ModifyMessageWithBodyWithResponse(ctx context.Context, threadId string, messageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyMessageResponse, error)

	ModifyMessageWithResponse(ctx context.Context, threadId string, messageId string, body openai_api.ModifyMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyMessageResponse, error)

	// ListMessageFilesWithResponse request
	ListMessageFilesWithResponse(ctx context.Context, threadId string, messageId string, params *openai_api.ListMessageFilesParams, reqEditors ...RequestEditorFn) (*ListMessageFilesResponse, error)

	// GetMessageFileWithResponse request
	GetMessageFileWithResponse(ctx context.Context, threadId string, messageId string, fileId string, reqEditors ...RequestEditorFn) (*GetMessageFileResponse, error)

	// ListRunsWithResponse request
	ListRunsWithResponse(ctx context.Context, threadId string, params *openai_api.ListRunsParams, reqEditors ...RequestEditorFn) (*ListRunsResponse, error)

	// CreateRunWithBodyWithResponse request with any body
	CreateRunWithBodyWithResponse(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRunResponse, error)

	CreateRunWithResponse(ctx context.Context, threadId string, body openai_api.CreateRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRunResponse, error)

	// GetRunWithResponse request
	GetRunWithResponse(ctx context.Context, threadId string, runId string, reqEditors ...RequestEditorFn) (*GetRunResponse, error)

	// ModifyRunWithBodyWithResponse request with any body
	ModifyRunWithBodyWithResponse(ctx context.Context, threadId string, runId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyRunResponse, error)

	ModifyRunWithResponse(ctx context.Context, threadId string, runId string, body openai_api.ModifyRunJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyRunResponse, error)

	// CancelRunWithResponse request
	CancelRunWithResponse(ctx context.Context, threadId string, runId string, reqEditors ...RequestEditorFn) (*CancelRunResponse, error)

	// ListRunStepsWithResponse request
	ListRunStepsWithResponse(ctx context.Context, threadId string, runId string, params *openai_api.ListRunStepsParams, reqEditors ...RequestEditorFn) (*ListRunStepsResponse, error)

	// GetRunStepWithResponse request
	GetRunStepWithResponse(ctx context.Context, threadId string, runId string, stepId string, reqEditors ...RequestEditorFn) (*GetRunStepResponse, error)

	// SubmitToolOuputsToRunWithBodyWithResponse request with any body
	SubmitToolOuputsToRunWithBodyWithResponse(ctx context.Context, threadId string, runId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitToolOuputsToRunResponse, error)

	SubmitToolOuputsToRunWithResponse(ctx context.Context, threadId string, runId string, body openai_api.SubmitToolOuputsToRunJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitToolOuputsToRunResponse, error)
}

type ListAssistantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAssistantsResponse
}

// Status returns HTTPResponse.Status
func (r ListAssistantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAssistantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAssistantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.AssistantObject
}

// Status returns HTTPResponse.Status
func (r CreateAssistantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAssistantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAssistantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteAssistantResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAssistantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAssistantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssistantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.AssistantObject
}

// Status returns HTTPResponse.Status
func (r GetAssistantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssistantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyAssistantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.AssistantObject
}

// Status returns HTTPResponse.Status
func (r ModifyAssistantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyAssistantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAssistantFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAssistantFilesResponse
}

// Status returns HTTPResponse.Status
func (r ListAssistantFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAssistantFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAssistantFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.AssistantFileObject
}

// Status returns HTTPResponse.Status
func (r CreateAssistantFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAssistantFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAssistantFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteAssistantFileResponse
}

// Status returns HTTPResponse.Status
func (r DeleteAssistantFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAssistantFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssistantFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.AssistantFileObject
}

// Status returns HTTPResponse.Status
func (r GetAssistantFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssistantFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSpeechResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSpeechResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSpeechResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTranscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateTranscriptionResponse
}

// Status returns HTTPResponse.Status
func (r CreateTranscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTranscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTranslationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateTranslationResponse
}

// Status returns HTTPResponse.Status
func (r CreateTranslationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTranslationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChatCompletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.CreateChatCompletionResponse
}

// Status returns HTTPResponse.Status
func (r CreateChatCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChatCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCompletionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateCompletionResponse
}

// Status returns HTTPResponse.Status
func (r CreateCompletionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCompletionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateEditResponse
}

// Status returns HTTPResponse.Status
func (r CreateEditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEmbeddingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateEmbeddingResponse
}

// Status returns HTTPResponse.Status
func (r CreateEmbeddingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEmbeddingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFilesResponse
}

// Status returns HTTPResponse.Status
func (r ListFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.OpenAIFile
}

// Status returns HTTPResponse.Status
func (r CreateFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteFileResponse
}

// Status returns HTTPResponse.Status
func (r DeleteFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.OpenAIFile
}

// Status returns HTTPResponse.Status
func (r RetrieveFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r DownloadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFineTunesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFineTunesResponse
}

// Status returns HTTPResponse.Status
func (r ListFineTunesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFineTunesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFineTuneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.FineTune
}

// Status returns HTTPResponse.Status
func (r CreateFineTuneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFineTuneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveFineTuneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.FineTune
}

// Status returns HTTPResponse.Status
func (r RetrieveFineTuneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveFineTuneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelFineTuneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.FineTune
}

// Status returns HTTPResponse.Status
func (r CancelFineTuneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelFineTuneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFineTuneEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListFineTuneEventsResponse
}

// Status returns HTTPResponse.Status
func (r ListFineTuneEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFineTuneEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPaginatedFineTuningJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPaginatedFineTuningJobsResponse
}

// Status returns HTTPResponse.Status
func (r ListPaginatedFineTuningJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPaginatedFineTuningJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFineTuningJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.FineTuningJob
}

// Status returns HTTPResponse.Status
func (r CreateFineTuningJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFineTuningJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveFineTuningJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.FineTuningJob
}

// Status returns HTTPResponse.Status
func (r RetrieveFineTuningJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveFineTuningJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelFineTuningJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.FineTuningJob
}

// Status returns HTTPResponse.Status
func (r CancelFineTuningJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelFineTuningJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFineTuningEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.ListFineTuningJobEventsResponse
}

// Status returns HTTPResponse.Status
func (r ListFineTuningEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFineTuningEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateImageEditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.ImagesResponse
}

// Status returns HTTPResponse.Status
func (r CreateImageEditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateImageEditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.ImagesResponse
}

// Status returns HTTPResponse.Status
func (r CreateImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateImageVariationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.ImagesResponse
}

// Status returns HTTPResponse.Status
func (r CreateImageVariationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateImageVariationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListModelsResponse
}

// Status returns HTTPResponse.Status
func (r ListModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteModelResponse
}

// Status returns HTTPResponse.Status
func (r DeleteModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.Model
}

// Status returns HTTPResponse.Status
func (r RetrieveModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateModerationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateModerationResponse
}

// Status returns HTTPResponse.Status
func (r CreateModerationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateModerationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateThreadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.ThreadObject
}

// Status returns HTTPResponse.Status
func (r CreateThreadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateThreadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateThreadAndRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.RunObject
}

// Status returns HTTPResponse.Status
func (r CreateThreadAndRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateThreadAndRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteThreadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteThreadResponse
}

// Status returns HTTPResponse.Status
func (r DeleteThreadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteThreadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetThreadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.ThreadObject
}

// Status returns HTTPResponse.Status
func (r GetThreadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetThreadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyThreadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.ThreadObject
}

// Status returns HTTPResponse.Status
func (r ModifyThreadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyThreadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListMessagesResponse
}

// Status returns HTTPResponse.Status
func (r ListMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.MessageObject
}

// Status returns HTTPResponse.Status
func (r CreateMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.MessageObject
}

// Status returns HTTPResponse.Status
func (r GetMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.MessageObject
}

// Status returns HTTPResponse.Status
func (r ModifyMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMessageFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListMessageFilesResponse
}

// Status returns HTTPResponse.Status
func (r ListMessageFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMessageFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.MessageFileObject
}

// Status returns HTTPResponse.Status
func (r GetMessageFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRunsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRunsResponse
}

// Status returns HTTPResponse.Status
func (r ListRunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.RunObject
}

// Status returns HTTPResponse.Status
func (r CreateRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.RunObject
}

// Status returns HTTPResponse.Status
func (r GetRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.RunObject
}

// Status returns HTTPResponse.Status
func (r ModifyRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.RunObject
}

// Status returns HTTPResponse.Status
func (r CancelRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRunStepsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRunStepsResponse
}

// Status returns HTTPResponse.Status
func (r ListRunStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRunStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.RunStepObject
}

// Status returns HTTPResponse.Status
func (r GetRunStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitToolOuputsToRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openai_api.RunObject
}

// Status returns HTTPResponse.Status
func (r SubmitToolOuputsToRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitToolOuputsToRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAssistantsWithResponse request returning *ListAssistantsResponse
func (c *ClientWithResponses) ListAssistantsWithResponse(ctx context.Context, params *openai_api.ListAssistantsParams, reqEditors ...RequestEditorFn) (*ListAssistantsResponse, error) {
	rsp, err := c.ListAssistants(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAssistantsResponse(rsp)
}

// CreateAssistantWithBodyWithResponse request with arbitrary body returning *CreateAssistantResponse
func (c *ClientWithResponses) CreateAssistantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssistantResponse, error) {
	rsp, err := c.CreateAssistantWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssistantResponse(rsp)
}

func (c *ClientWithResponses) CreateAssistantWithResponse(ctx context.Context, body openai_api.CreateAssistantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssistantResponse, error) {
	rsp, err := c.CreateAssistant(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssistantResponse(rsp)
}

// DeleteAssistantWithResponse request returning *DeleteAssistantResponse
func (c *ClientWithResponses) DeleteAssistantWithResponse(ctx context.Context, assistantId string, reqEditors ...RequestEditorFn) (*DeleteAssistantResponse, error) {
	rsp, err := c.DeleteAssistant(ctx, assistantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAssistantResponse(rsp)
}

// GetAssistantWithResponse request returning *GetAssistantResponse
func (c *ClientWithResponses) GetAssistantWithResponse(ctx context.Context, assistantId string, reqEditors ...RequestEditorFn) (*GetAssistantResponse, error) {
	rsp, err := c.GetAssistant(ctx, assistantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssistantResponse(rsp)
}

// ModifyAssistantWithBodyWithResponse request with arbitrary body returning *ModifyAssistantResponse
func (c *ClientWithResponses) ModifyAssistantWithBodyWithResponse(ctx context.Context, assistantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyAssistantResponse, error) {
	rsp, err := c.ModifyAssistantWithBody(ctx, assistantId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyAssistantResponse(rsp)
}

func (c *ClientWithResponses) ModifyAssistantWithResponse(ctx context.Context, assistantId string, body openai_api.ModifyAssistantJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyAssistantResponse, error) {
	rsp, err := c.ModifyAssistant(ctx, assistantId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyAssistantResponse(rsp)
}

// ListAssistantFilesWithResponse request returning *ListAssistantFilesResponse
func (c *ClientWithResponses) ListAssistantFilesWithResponse(ctx context.Context, assistantId string, params *openai_api.ListAssistantFilesParams, reqEditors ...RequestEditorFn) (*ListAssistantFilesResponse, error) {
	rsp, err := c.ListAssistantFiles(ctx, assistantId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAssistantFilesResponse(rsp)
}

// CreateAssistantFileWithBodyWithResponse request with arbitrary body returning *CreateAssistantFileResponse
func (c *ClientWithResponses) CreateAssistantFileWithBodyWithResponse(ctx context.Context, assistantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssistantFileResponse, error) {
	rsp, err := c.CreateAssistantFileWithBody(ctx, assistantId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssistantFileResponse(rsp)
}

func (c *ClientWithResponses) CreateAssistantFileWithResponse(ctx context.Context, assistantId string, body openai_api.CreateAssistantFileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssistantFileResponse, error) {
	rsp, err := c.CreateAssistantFile(ctx, assistantId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssistantFileResponse(rsp)
}

// DeleteAssistantFileWithResponse request returning *DeleteAssistantFileResponse
func (c *ClientWithResponses) DeleteAssistantFileWithResponse(ctx context.Context, assistantId string, fileId string, reqEditors ...RequestEditorFn) (*DeleteAssistantFileResponse, error) {
	rsp, err := c.DeleteAssistantFile(ctx, assistantId, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAssistantFileResponse(rsp)
}

// GetAssistantFileWithResponse request returning *GetAssistantFileResponse
func (c *ClientWithResponses) GetAssistantFileWithResponse(ctx context.Context, assistantId string, fileId string, reqEditors ...RequestEditorFn) (*GetAssistantFileResponse, error) {
	rsp, err := c.GetAssistantFile(ctx, assistantId, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssistantFileResponse(rsp)
}

// CreateSpeechWithBodyWithResponse request with arbitrary body returning *CreateSpeechResponse
func (c *ClientWithResponses) CreateSpeechWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpeechResponse, error) {
	rsp, err := c.CreateSpeechWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpeechResponse(rsp)
}

func (c *ClientWithResponses) CreateSpeechWithResponse(ctx context.Context, body openai_api.CreateSpeechJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpeechResponse, error) {
	rsp, err := c.CreateSpeech(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpeechResponse(rsp)
}

// CreateTranscriptionWithBodyWithResponse request with arbitrary body returning *CreateTranscriptionResponse
func (c *ClientWithResponses) CreateTranscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTranscriptionResponse, error) {
	rsp, err := c.CreateTranscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTranscriptionResponse(rsp)
}

// CreateTranslationWithBodyWithResponse request with arbitrary body returning *CreateTranslationResponse
func (c *ClientWithResponses) CreateTranslationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTranslationResponse, error) {
	rsp, err := c.CreateTranslationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTranslationResponse(rsp)
}

// CreateChatCompletionWithBodyWithResponse request with arbitrary body returning *CreateChatCompletionResponse
func (c *ClientWithResponses) CreateChatCompletionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChatCompletionResponse, error) {
	rsp, err := c.CreateChatCompletionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChatCompletionResponse(rsp)
}

func (c *ClientWithResponses) CreateChatCompletionWithResponse(ctx context.Context, body openai_api.CreateChatCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChatCompletionResponse, error) {
	rsp, err := c.CreateChatCompletion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChatCompletionResponse(rsp)
}

// CreateCompletionWithBodyWithResponse request with arbitrary body returning *CreateCompletionResponse
func (c *ClientWithResponses) CreateCompletionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCompletionResponse, error) {
	rsp, err := c.CreateCompletionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCompletionResponse(rsp)
}

func (c *ClientWithResponses) CreateCompletionWithResponse(ctx context.Context, body openai_api.CreateCompletionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCompletionResponse, error) {
	rsp, err := c.CreateCompletion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCompletionResponse(rsp)
}

// CreateEditWithBodyWithResponse request with arbitrary body returning *CreateEditResponse
func (c *ClientWithResponses) CreateEditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEditResponse, error) {
	rsp, err := c.CreateEditWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEditResponse(rsp)
}

func (c *ClientWithResponses) CreateEditWithResponse(ctx context.Context, body openai_api.CreateEditJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEditResponse, error) {
	rsp, err := c.CreateEdit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEditResponse(rsp)
}

// CreateEmbeddingWithBodyWithResponse request with arbitrary body returning *CreateEmbeddingResponse
func (c *ClientWithResponses) CreateEmbeddingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEmbeddingResponse, error) {
	rsp, err := c.CreateEmbeddingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEmbeddingResponse(rsp)
}

func (c *ClientWithResponses) CreateEmbeddingWithResponse(ctx context.Context, body openai_api.CreateEmbeddingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEmbeddingResponse, error) {
	rsp, err := c.CreateEmbedding(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEmbeddingResponse(rsp)
}

// ListFilesWithResponse request returning *ListFilesResponse
func (c *ClientWithResponses) ListFilesWithResponse(ctx context.Context, params *openai_api.ListFilesParams, reqEditors ...RequestEditorFn) (*ListFilesResponse, error) {
	rsp, err := c.ListFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFilesResponse(rsp)
}

// CreateFileWithBodyWithResponse request with arbitrary body returning *CreateFileResponse
func (c *ClientWithResponses) CreateFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFileResponse, error) {
	rsp, err := c.CreateFileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFileResponse(rsp)
}

// DeleteFileWithResponse request returning *DeleteFileResponse
func (c *ClientWithResponses) DeleteFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*DeleteFileResponse, error) {
	rsp, err := c.DeleteFile(ctx, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFileResponse(rsp)
}

// RetrieveFileWithResponse request returning *RetrieveFileResponse
func (c *ClientWithResponses) RetrieveFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*RetrieveFileResponse, error) {
	rsp, err := c.RetrieveFile(ctx, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveFileResponse(rsp)
}

// DownloadFileWithResponse request returning *DownloadFileResponse
func (c *ClientWithResponses) DownloadFileWithResponse(ctx context.Context, fileId string, reqEditors ...RequestEditorFn) (*DownloadFileResponse, error) {
	rsp, err := c.DownloadFile(ctx, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadFileResponse(rsp)
}

// ListFineTunesWithResponse request returning *ListFineTunesResponse
func (c *ClientWithResponses) ListFineTunesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListFineTunesResponse, error) {
	rsp, err := c.ListFineTunes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFineTunesResponse(rsp)
}

// CreateFineTuneWithBodyWithResponse request with arbitrary body returning *CreateFineTuneResponse
func (c *ClientWithResponses) CreateFineTuneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFineTuneResponse, error) {
	rsp, err := c.CreateFineTuneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFineTuneResponse(rsp)
}

func (c *ClientWithResponses) CreateFineTuneWithResponse(ctx context.Context, body openai_api.CreateFineTuneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFineTuneResponse, error) {
	rsp, err := c.CreateFineTune(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFineTuneResponse(rsp)
}

// RetrieveFineTuneWithResponse request returning *RetrieveFineTuneResponse
func (c *ClientWithResponses) RetrieveFineTuneWithResponse(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*RetrieveFineTuneResponse, error) {
	rsp, err := c.RetrieveFineTune(ctx, fineTuneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveFineTuneResponse(rsp)
}

// CancelFineTuneWithResponse request returning *CancelFineTuneResponse
func (c *ClientWithResponses) CancelFineTuneWithResponse(ctx context.Context, fineTuneId string, reqEditors ...RequestEditorFn) (*CancelFineTuneResponse, error) {
	rsp, err := c.CancelFineTune(ctx, fineTuneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelFineTuneResponse(rsp)
}

// ListFineTuneEventsWithResponse request returning *ListFineTuneEventsResponse
func (c *ClientWithResponses) ListFineTuneEventsWithResponse(ctx context.Context, fineTuneId string, params *openai_api.ListFineTuneEventsParams, reqEditors ...RequestEditorFn) (*ListFineTuneEventsResponse, error) {
	rsp, err := c.ListFineTuneEvents(ctx, fineTuneId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFineTuneEventsResponse(rsp)
}

// ListPaginatedFineTuningJobsWithResponse request returning *ListPaginatedFineTuningJobsResponse
func (c *ClientWithResponses) ListPaginatedFineTuningJobsWithResponse(ctx context.Context, params *openai_api.ListPaginatedFineTuningJobsParams, reqEditors ...RequestEditorFn) (*ListPaginatedFineTuningJobsResponse, error) {
	rsp, err := c.ListPaginatedFineTuningJobs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPaginatedFineTuningJobsResponse(rsp)
}

// CreateFineTuningJobWithBodyWithResponse request with arbitrary body returning *CreateFineTuningJobResponse
func (c *ClientWithResponses) CreateFineTuningJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFineTuningJobResponse, error) {
	rsp, err := c.CreateFineTuningJobWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFineTuningJobResponse(rsp)
}

func (c *ClientWithResponses) CreateFineTuningJobWithResponse(ctx context.Context, body openai_api.CreateFineTuningJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFineTuningJobResponse, error) {
	rsp, err := c.CreateFineTuningJob(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFineTuningJobResponse(rsp)
}

// RetrieveFineTuningJobWithResponse request returning *RetrieveFineTuningJobResponse
func (c *ClientWithResponses) RetrieveFineTuningJobWithResponse(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*RetrieveFineTuningJobResponse, error) {
	rsp, err := c.RetrieveFineTuningJob(ctx, fineTuningJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveFineTuningJobResponse(rsp)
}

// CancelFineTuningJobWithResponse request returning *CancelFineTuningJobResponse
func (c *ClientWithResponses) CancelFineTuningJobWithResponse(ctx context.Context, fineTuningJobId string, reqEditors ...RequestEditorFn) (*CancelFineTuningJobResponse, error) {
	rsp, err := c.CancelFineTuningJob(ctx, fineTuningJobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelFineTuningJobResponse(rsp)
}

// ListFineTuningEventsWithResponse request returning *ListFineTuningEventsResponse
func (c *ClientWithResponses) ListFineTuningEventsWithResponse(ctx context.Context, fineTuningJobId string, params *openai_api.ListFineTuningEventsParams, reqEditors ...RequestEditorFn) (*ListFineTuningEventsResponse, error) {
	rsp, err := c.ListFineTuningEvents(ctx, fineTuningJobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFineTuningEventsResponse(rsp)
}

// CreateImageEditWithBodyWithResponse request with arbitrary body returning *CreateImageEditResponse
func (c *ClientWithResponses) CreateImageEditWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageEditResponse, error) {
	rsp, err := c.CreateImageEditWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImageEditResponse(rsp)
}

// CreateImageWithBodyWithResponse request with arbitrary body returning *CreateImageResponse
func (c *ClientWithResponses) CreateImageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageResponse, error) {
	rsp, err := c.CreateImageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImageResponse(rsp)
}

func (c *ClientWithResponses) CreateImageWithResponse(ctx context.Context, body openai_api.CreateImageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateImageResponse, error) {
	rsp, err := c.CreateImage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImageResponse(rsp)
}

// CreateImageVariationWithBodyWithResponse request with arbitrary body returning *CreateImageVariationResponse
func (c *ClientWithResponses) CreateImageVariationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImageVariationResponse, error) {
	rsp, err := c.CreateImageVariationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImageVariationResponse(rsp)
}

// ListModelsWithResponse request returning *ListModelsResponse
func (c *ClientWithResponses) ListModelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListModelsResponse, error) {
	rsp, err := c.ListModels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModelsResponse(rsp)
}

// DeleteModelWithResponse request returning *DeleteModelResponse
func (c *ClientWithResponses) DeleteModelWithResponse(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*DeleteModelResponse, error) {
	rsp, err := c.DeleteModel(ctx, model, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModelResponse(rsp)
}

// RetrieveModelWithResponse request returning *RetrieveModelResponse
func (c *ClientWithResponses) RetrieveModelWithResponse(ctx context.Context, model string, reqEditors ...RequestEditorFn) (*RetrieveModelResponse, error) {
	rsp, err := c.RetrieveModel(ctx, model, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveModelResponse(rsp)
}

// CreateModerationWithBodyWithResponse request with arbitrary body returning *CreateModerationResponse
func (c *ClientWithResponses) CreateModerationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModerationResponse, error) {
	rsp, err := c.CreateModerationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModerationResponse(rsp)
}

func (c *ClientWithResponses) CreateModerationWithResponse(ctx context.Context, body openai_api.CreateModerationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModerationResponse, error) {
	rsp, err := c.CreateModeration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModerationResponse(rsp)
}

// CreateThreadWithBodyWithResponse request with arbitrary body returning *CreateThreadResponse
func (c *ClientWithResponses) CreateThreadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThreadResponse, error) {
	rsp, err := c.CreateThreadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreadResponse(rsp)
}

func (c *ClientWithResponses) CreateThreadWithResponse(ctx context.Context, body openai_api.CreateThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThreadResponse, error) {
	rsp, err := c.CreateThread(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreadResponse(rsp)
}

// CreateThreadAndRunWithBodyWithResponse request with arbitrary body returning *CreateThreadAndRunResponse
func (c *ClientWithResponses) CreateThreadAndRunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThreadAndRunResponse, error) {
	rsp, err := c.CreateThreadAndRunWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreadAndRunResponse(rsp)
}

func (c *ClientWithResponses) CreateThreadAndRunWithResponse(ctx context.Context, body openai_api.CreateThreadAndRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThreadAndRunResponse, error) {
	rsp, err := c.CreateThreadAndRun(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThreadAndRunResponse(rsp)
}

// DeleteThreadWithResponse request returning *DeleteThreadResponse
func (c *ClientWithResponses) DeleteThreadWithResponse(ctx context.Context, threadId string, reqEditors ...RequestEditorFn) (*DeleteThreadResponse, error) {
	rsp, err := c.DeleteThread(ctx, threadId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteThreadResponse(rsp)
}

// GetThreadWithResponse request returning *GetThreadResponse
func (c *ClientWithResponses) GetThreadWithResponse(ctx context.Context, threadId string, reqEditors ...RequestEditorFn) (*GetThreadResponse, error) {
	rsp, err := c.GetThread(ctx, threadId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetThreadResponse(rsp)
}

// ModifyThreadWithBodyWithResponse request with arbitrary body returning *ModifyThreadResponse
func (c *ClientWithResponses) ModifyThreadWithBodyWithResponse(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyThreadResponse, error) {
	rsp, err := c.ModifyThreadWithBody(ctx, threadId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyThreadResponse(rsp)
}

func (c *ClientWithResponses) ModifyThreadWithResponse(ctx context.Context, threadId string, body openai_api.ModifyThreadJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyThreadResponse, error) {
	rsp, err := c.ModifyThread(ctx, threadId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyThreadResponse(rsp)
}

// ListMessagesWithResponse request returning *ListMessagesResponse
func (c *ClientWithResponses) ListMessagesWithResponse(ctx context.Context, threadId string, params *openai_api.ListMessagesParams, reqEditors ...RequestEditorFn) (*ListMessagesResponse, error) {
	rsp, err := c.ListMessages(ctx, threadId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMessagesResponse(rsp)
}

// CreateMessageWithBodyWithResponse request with arbitrary body returning *CreateMessageResponse
func (c *ClientWithResponses) CreateMessageWithBodyWithResponse(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageResponse, error) {
	rsp, err := c.CreateMessageWithBody(ctx, threadId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageResponse(rsp)
}

func (c *ClientWithResponses) CreateMessageWithResponse(ctx context.Context, threadId string, body openai_api.CreateMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessageResponse, error) {
	rsp, err := c.CreateMessage(ctx, threadId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageResponse(rsp)
}

// GetMessageWithResponse request returning *GetMessageResponse
func (c *ClientWithResponses) GetMessageWithResponse(ctx context.Context, threadId string, messageId string, reqEditors ...RequestEditorFn) (*GetMessageResponse, error) {
	rsp, err := c.GetMessage(ctx, threadId, messageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageResponse(rsp)
}

// ModifyMessageWithBodyWithResponse request with arbitrary body returning *ModifyMessageResponse
func (c *ClientWithResponses) ModifyMessageWithBodyWithResponse(ctx context.Context, threadId string, messageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyMessageResponse, error) {
	rsp, err := c.ModifyMessageWithBody(ctx, threadId, messageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyMessageResponse(rsp)
}

func (c *ClientWithResponses) ModifyMessageWithResponse(ctx context.Context, threadId string, messageId string, body openai_api.ModifyMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyMessageResponse, error) {
	rsp, err := c.ModifyMessage(ctx, threadId, messageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyMessageResponse(rsp)
}

// ListMessageFilesWithResponse request returning *ListMessageFilesResponse
func (c *ClientWithResponses) ListMessageFilesWithResponse(ctx context.Context, threadId string, messageId string, params *openai_api.ListMessageFilesParams, reqEditors ...RequestEditorFn) (*ListMessageFilesResponse, error) {
	rsp, err := c.ListMessageFiles(ctx, threadId, messageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMessageFilesResponse(rsp)
}

// GetMessageFileWithResponse request returning *GetMessageFileResponse
func (c *ClientWithResponses) GetMessageFileWithResponse(ctx context.Context, threadId string, messageId string, fileId string, reqEditors ...RequestEditorFn) (*GetMessageFileResponse, error) {
	rsp, err := c.GetMessageFile(ctx, threadId, messageId, fileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageFileResponse(rsp)
}

// ListRunsWithResponse request returning *ListRunsResponse
func (c *ClientWithResponses) ListRunsWithResponse(ctx context.Context, threadId string, params *openai_api.ListRunsParams, reqEditors ...RequestEditorFn) (*ListRunsResponse, error) {
	rsp, err := c.ListRuns(ctx, threadId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRunsResponse(rsp)
}

// CreateRunWithBodyWithResponse request with arbitrary body returning *CreateRunResponse
func (c *ClientWithResponses) CreateRunWithBodyWithResponse(ctx context.Context, threadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRunResponse, error) {
	rsp, err := c.CreateRunWithBody(ctx, threadId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunResponse(rsp)
}

func (c *ClientWithResponses) CreateRunWithResponse(ctx context.Context, threadId string, body openai_api.CreateRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRunResponse, error) {
	rsp, err := c.CreateRun(ctx, threadId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunResponse(rsp)
}

// GetRunWithResponse request returning *GetRunResponse
func (c *ClientWithResponses) GetRunWithResponse(ctx context.Context, threadId string, runId string, reqEditors ...RequestEditorFn) (*GetRunResponse, error) {
	rsp, err := c.GetRun(ctx, threadId, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunResponse(rsp)
}

// ModifyRunWithBodyWithResponse request with arbitrary body returning *ModifyRunResponse
func (c *ClientWithResponses) ModifyRunWithBodyWithResponse(ctx context.Context, threadId string, runId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyRunResponse, error) {
	rsp, err := c.ModifyRunWithBody(ctx, threadId, runId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyRunResponse(rsp)
}

func (c *ClientWithResponses) ModifyRunWithResponse(ctx context.Context, threadId string, runId string, body openai_api.ModifyRunJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyRunResponse, error) {
	rsp, err := c.ModifyRun(ctx, threadId, runId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyRunResponse(rsp)
}

// CancelRunWithResponse request returning *CancelRunResponse
func (c *ClientWithResponses) CancelRunWithResponse(ctx context.Context, threadId string, runId string, reqEditors ...RequestEditorFn) (*CancelRunResponse, error) {
	rsp, err := c.CancelRun(ctx, threadId, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelRunResponse(rsp)
}

// ListRunStepsWithResponse request returning *ListRunStepsResponse
func (c *ClientWithResponses) ListRunStepsWithResponse(ctx context.Context, threadId string, runId string, params *openai_api.ListRunStepsParams, reqEditors ...RequestEditorFn) (*ListRunStepsResponse, error) {
	rsp, err := c.ListRunSteps(ctx, threadId, runId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRunStepsResponse(rsp)
}

// GetRunStepWithResponse request returning *GetRunStepResponse
func (c *ClientWithResponses) GetRunStepWithResponse(ctx context.Context, threadId string, runId string, stepId string, reqEditors ...RequestEditorFn) (*GetRunStepResponse, error) {
	rsp, err := c.GetRunStep(ctx, threadId, runId, stepId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunStepResponse(rsp)
}

// SubmitToolOuputsToRunWithBodyWithResponse request with arbitrary body returning *SubmitToolOuputsToRunResponse
func (c *ClientWithResponses) SubmitToolOuputsToRunWithBodyWithResponse(ctx context.Context, threadId string, runId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitToolOuputsToRunResponse, error) {
	rsp, err := c.SubmitToolOuputsToRunWithBody(ctx, threadId, runId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitToolOuputsToRunResponse(rsp)
}

func (c *ClientWithResponses) SubmitToolOuputsToRunWithResponse(ctx context.Context, threadId string, runId string, body openai_api.SubmitToolOuputsToRunJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitToolOuputsToRunResponse, error) {
	rsp, err := c.SubmitToolOuputsToRun(ctx, threadId, runId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitToolOuputsToRunResponse(rsp)
}

// ParseListAssistantsResponse parses an HTTP response from a ListAssistantsWithResponse call
func ParseListAssistantsResponse(rsp *http.Response) (*ListAssistantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAssistantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAssistantsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAssistantResponse parses an HTTP response from a CreateAssistantWithResponse call
func ParseCreateAssistantResponse(rsp *http.Response) (*CreateAssistantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAssistantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.AssistantObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAssistantResponse parses an HTTP response from a DeleteAssistantWithResponse call
func ParseDeleteAssistantResponse(rsp *http.Response) (*DeleteAssistantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAssistantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteAssistantResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAssistantResponse parses an HTTP response from a GetAssistantWithResponse call
func ParseGetAssistantResponse(rsp *http.Response) (*GetAssistantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssistantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.AssistantObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyAssistantResponse parses an HTTP response from a ModifyAssistantWithResponse call
func ParseModifyAssistantResponse(rsp *http.Response) (*ModifyAssistantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyAssistantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.AssistantObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAssistantFilesResponse parses an HTTP response from a ListAssistantFilesWithResponse call
func ParseListAssistantFilesResponse(rsp *http.Response) (*ListAssistantFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAssistantFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAssistantFilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAssistantFileResponse parses an HTTP response from a CreateAssistantFileWithResponse call
func ParseCreateAssistantFileResponse(rsp *http.Response) (*CreateAssistantFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAssistantFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.AssistantFileObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAssistantFileResponse parses an HTTP response from a DeleteAssistantFileWithResponse call
func ParseDeleteAssistantFileResponse(rsp *http.Response) (*DeleteAssistantFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAssistantFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteAssistantFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAssistantFileResponse parses an HTTP response from a GetAssistantFileWithResponse call
func ParseGetAssistantFileResponse(rsp *http.Response) (*GetAssistantFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssistantFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.AssistantFileObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSpeechResponse parses an HTTP response from a CreateSpeechWithResponse call
func ParseCreateSpeechResponse(rsp *http.Response) (*CreateSpeechResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSpeechResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateTranscriptionResponse parses an HTTP response from a CreateTranscriptionWithResponse call
func ParseCreateTranscriptionResponse(rsp *http.Response) (*CreateTranscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTranscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateTranscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTranslationResponse parses an HTTP response from a CreateTranslationWithResponse call
func ParseCreateTranslationResponse(rsp *http.Response) (*CreateTranslationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTranslationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateTranslationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateChatCompletionResponse parses an HTTP response from a CreateChatCompletionWithResponse call
func ParseCreateChatCompletionResponse(rsp *http.Response) (*CreateChatCompletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateChatCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.CreateChatCompletionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCompletionResponse parses an HTTP response from a CreateCompletionWithResponse call
func ParseCreateCompletionResponse(rsp *http.Response) (*CreateCompletionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCompletionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateCompletionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEditResponse parses an HTTP response from a CreateEditWithResponse call
func ParseCreateEditResponse(rsp *http.Response) (*CreateEditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateEditResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEmbeddingResponse parses an HTTP response from a CreateEmbeddingWithResponse call
func ParseCreateEmbeddingResponse(rsp *http.Response) (*CreateEmbeddingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEmbeddingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateEmbeddingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFilesResponse parses an HTTP response from a ListFilesWithResponse call
func ParseListFilesResponse(rsp *http.Response) (*ListFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFileResponse parses an HTTP response from a CreateFileWithResponse call
func ParseCreateFileResponse(rsp *http.Response) (*CreateFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.OpenAIFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteFileResponse parses an HTTP response from a DeleteFileWithResponse call
func ParseDeleteFileResponse(rsp *http.Response) (*DeleteFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveFileResponse parses an HTTP response from a RetrieveFileWithResponse call
func ParseRetrieveFileResponse(rsp *http.Response) (*RetrieveFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.OpenAIFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadFileResponse parses an HTTP response from a DownloadFileWithResponse call
func ParseDownloadFileResponse(rsp *http.Response) (*DownloadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFineTunesResponse parses an HTTP response from a ListFineTunesWithResponse call
func ParseListFineTunesResponse(rsp *http.Response) (*ListFineTunesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFineTunesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFineTunesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFineTuneResponse parses an HTTP response from a CreateFineTuneWithResponse call
func ParseCreateFineTuneResponse(rsp *http.Response) (*CreateFineTuneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFineTuneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.FineTune
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveFineTuneResponse parses an HTTP response from a RetrieveFineTuneWithResponse call
func ParseRetrieveFineTuneResponse(rsp *http.Response) (*RetrieveFineTuneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveFineTuneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.FineTune
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelFineTuneResponse parses an HTTP response from a CancelFineTuneWithResponse call
func ParseCancelFineTuneResponse(rsp *http.Response) (*CancelFineTuneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelFineTuneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.FineTune
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFineTuneEventsResponse parses an HTTP response from a ListFineTuneEventsWithResponse call
func ParseListFineTuneEventsResponse(rsp *http.Response) (*ListFineTuneEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFineTuneEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFineTuneEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPaginatedFineTuningJobsResponse parses an HTTP response from a ListPaginatedFineTuningJobsWithResponse call
func ParseListPaginatedFineTuningJobsResponse(rsp *http.Response) (*ListPaginatedFineTuningJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPaginatedFineTuningJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPaginatedFineTuningJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFineTuningJobResponse parses an HTTP response from a CreateFineTuningJobWithResponse call
func ParseCreateFineTuningJobResponse(rsp *http.Response) (*CreateFineTuningJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFineTuningJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.FineTuningJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveFineTuningJobResponse parses an HTTP response from a RetrieveFineTuningJobWithResponse call
func ParseRetrieveFineTuningJobResponse(rsp *http.Response) (*RetrieveFineTuningJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveFineTuningJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.FineTuningJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelFineTuningJobResponse parses an HTTP response from a CancelFineTuningJobWithResponse call
func ParseCancelFineTuningJobResponse(rsp *http.Response) (*CancelFineTuningJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelFineTuningJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.FineTuningJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListFineTuningEventsResponse parses an HTTP response from a ListFineTuningEventsWithResponse call
func ParseListFineTuningEventsResponse(rsp *http.Response) (*ListFineTuningEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFineTuningEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.ListFineTuningJobEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateImageEditResponse parses an HTTP response from a CreateImageEditWithResponse call
func ParseCreateImageEditResponse(rsp *http.Response) (*CreateImageEditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateImageEditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.ImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateImageResponse parses an HTTP response from a CreateImageWithResponse call
func ParseCreateImageResponse(rsp *http.Response) (*CreateImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.ImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateImageVariationResponse parses an HTTP response from a CreateImageVariationWithResponse call
func ParseCreateImageVariationResponse(rsp *http.Response) (*CreateImageVariationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateImageVariationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.ImagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModelsResponse parses an HTTP response from a ListModelsWithResponse call
func ParseListModelsResponse(rsp *http.Response) (*ListModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListModelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteModelResponse parses an HTTP response from a DeleteModelWithResponse call
func ParseDeleteModelResponse(rsp *http.Response) (*DeleteModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteModelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveModelResponse parses an HTTP response from a RetrieveModelWithResponse call
func ParseRetrieveModelResponse(rsp *http.Response) (*RetrieveModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.Model
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateModerationResponse parses an HTTP response from a CreateModerationWithResponse call
func ParseCreateModerationResponse(rsp *http.Response) (*CreateModerationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateModerationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateModerationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateThreadResponse parses an HTTP response from a CreateThreadWithResponse call
func ParseCreateThreadResponse(rsp *http.Response) (*CreateThreadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateThreadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.ThreadObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateThreadAndRunResponse parses an HTTP response from a CreateThreadAndRunWithResponse call
func ParseCreateThreadAndRunResponse(rsp *http.Response) (*CreateThreadAndRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateThreadAndRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.RunObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteThreadResponse parses an HTTP response from a DeleteThreadWithResponse call
func ParseDeleteThreadResponse(rsp *http.Response) (*DeleteThreadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteThreadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteThreadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetThreadResponse parses an HTTP response from a GetThreadWithResponse call
func ParseGetThreadResponse(rsp *http.Response) (*GetThreadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetThreadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.ThreadObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyThreadResponse parses an HTTP response from a ModifyThreadWithResponse call
func ParseModifyThreadResponse(rsp *http.Response) (*ModifyThreadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyThreadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.ThreadObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMessagesResponse parses an HTTP response from a ListMessagesWithResponse call
func ParseListMessagesResponse(rsp *http.Response) (*ListMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListMessagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMessageResponse parses an HTTP response from a CreateMessageWithResponse call
func ParseCreateMessageResponse(rsp *http.Response) (*CreateMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.MessageObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessageResponse parses an HTTP response from a GetMessageWithResponse call
func ParseGetMessageResponse(rsp *http.Response) (*GetMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.MessageObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyMessageResponse parses an HTTP response from a ModifyMessageWithResponse call
func ParseModifyMessageResponse(rsp *http.Response) (*ModifyMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.MessageObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMessageFilesResponse parses an HTTP response from a ListMessageFilesWithResponse call
func ParseListMessageFilesResponse(rsp *http.Response) (*ListMessageFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMessageFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListMessageFilesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessageFileResponse parses an HTTP response from a GetMessageFileWithResponse call
func ParseGetMessageFileResponse(rsp *http.Response) (*GetMessageFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.MessageFileObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRunsResponse parses an HTTP response from a ListRunsWithResponse call
func ParseListRunsResponse(rsp *http.Response) (*ListRunsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRunsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRunResponse parses an HTTP response from a CreateRunWithResponse call
func ParseCreateRunResponse(rsp *http.Response) (*CreateRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.RunObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRunResponse parses an HTTP response from a GetRunWithResponse call
func ParseGetRunResponse(rsp *http.Response) (*GetRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.RunObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyRunResponse parses an HTTP response from a ModifyRunWithResponse call
func ParseModifyRunResponse(rsp *http.Response) (*ModifyRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.RunObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelRunResponse parses an HTTP response from a CancelRunWithResponse call
func ParseCancelRunResponse(rsp *http.Response) (*CancelRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.RunObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRunStepsResponse parses an HTTP response from a ListRunStepsWithResponse call
func ParseListRunStepsResponse(rsp *http.Response) (*ListRunStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRunStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRunStepsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRunStepResponse parses an HTTP response from a GetRunStepWithResponse call
func ParseGetRunStepResponse(rsp *http.Response) (*GetRunStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.RunStepObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubmitToolOuputsToRunResponse parses an HTTP response from a SubmitToolOuputsToRunWithResponse call
func ParseSubmitToolOuputsToRunResponse(rsp *http.Response) (*SubmitToolOuputsToRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitToolOuputsToRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openai_api.RunObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
